apiVersion: apps/v1
kind: StatefulSet
metadata:
  namespace: dpsrv
  name: redis
spec:
  serviceName: redis
  replicas: 2
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      annotations:
        traffic.sidecar.istio.io/excludeInboundPorts: "6379"
      labels:
        app: redis
    spec:
      nodeSelector:
        DPSRV_REGION: cnt-use1
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app: redis
              topologyKey: "kubernetes.io/hostname"
      containers:
        - name: redis
          image: redis:8.2.1-alpine
          ports:
            - name: redis
              containerPort: 6379
            - name: sentinel
              containerPort: 26379
          envFrom:
            - configMapRef:
                name: dpsrv
          env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: redis-ri-redis-password
                  key: redis-ri-redis-password
          command: ["/bin/sh", "-c"]
          args:
            - |
              set -x
              HOSTNAME=$(hostname)
              REDIS_CLUSTER_IP=$(getent hosts redis|awk '{ print $1 }')

              if [ "${HOSTNAME:-}" = "redis-0" ]; then
                echo "Starting as master"

                redis-server \
                  --port 6379 \
                  --save "" \
                  --appendonly no \
                  --requirepass "${REDIS_PASSWORD:-}" \
                  --protected-mode no &

              else
                echo "Starting as replica"

                until redis-cli -h redis-0.redis.dpsrv.svc.cluster.local -p 6379 -a "${REDIS_PASSWORD:-}" PING; do
                  echo "Waiting for master redis..."
                  sleep 1
                done

                redis-server \
                  --port 6379 \
                  --save "" \
                  --appendonly no \
                  --requirepass "${REDIS_PASSWORD:-}" \
                  --masterauth "${REDIS_PASSWORD:-}" \
                  --replicaof redis-0.redis.dpsrv.svc.cluster.local 6379 \
                  --protected-mode no &
              fi

              until redis-cli -h localhost -p 6379 -a "${REDIS_PASSWORD:-}" PING; do
                echo "Waiting for local redis..."
                sleep 1
              done

              # Start sentinel
              cat > /tmp/sentinel.conf <<EOF
              port 26379
              requirepass ${REDIS_PASSWORD:-}
              sentinel resolve-hostnames yes
              sentinel announce-ip $(hostname -i)
              sentinel monitor mymaster redis-0.redis.dpsrv.svc.cluster.local 6379 2
              sentinel auth-pass mymaster ${REDIS_PASSWORD:-}
              sentinel sentinel-user default
              sentinel sentinel-pass ${REDIS_PASSWORD:-}
              sentinel down-after-milliseconds mymaster 5000
              sentinel failover-timeout mymaster 10000
              sentinel parallel-syncs mymaster 1
              EOF

              cat /tmp/sentinel.conf
              exec redis-sentinel /tmp/sentinel.conf 

      enableServiceLinks: false
      imagePullSecrets:
        - name: dockerhub-dpsrv
      securityContext:
        #runAsUser: 999
        #runAsGroup: 999
        #fsGroup: 999

